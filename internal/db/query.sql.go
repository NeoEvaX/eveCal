// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserCharacters = `-- name: GetUserCharacters :many
select u.userid, u.characterownerhash, c.characterid, c.expiry, c.portraiturl, c.name
from users u
inner join characters c on u.characterownerhash = c.charaterownerhash
where u.characterownerhash = $1
limit 1
`

type GetUserCharactersRow struct {
	Userid             int32
	Characterownerhash string
	Characterid        int32
	Expiry             pgtype.Timestamptz
	Portraiturl        string
	Name               string
}

func (q *Queries) GetUserCharacters(ctx context.Context, characterownerhash string) ([]GetUserCharactersRow, error) {
	rows, err := q.db.Query(ctx, getUserCharacters, characterownerhash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCharactersRow
	for rows.Next() {
		var i GetUserCharactersRow
		if err := rows.Scan(
			&i.Userid,
			&i.Characterownerhash,
			&i.Characterid,
			&i.Expiry,
			&i.Portraiturl,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
