// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCharacter = `-- name: CreateCharacter :exec
INSERT INTO
  characters (characterOwnerHash, expiry, portraitUrl, name)
VALUES
  ($1, $2, $3, $4)
`

type CreateCharacterParams struct {
	Characterownerhash string
	Expiry             pgtype.Timestamptz
	Portraiturl        string
	Name               string
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) error {
	_, err := q.db.Exec(ctx, createCharacter,
		arg.Characterownerhash,
		arg.Expiry,
		arg.Portraiturl,
		arg.Name,
	)
	return err
}

const createScope = `-- name: CreateScope :exec
INSERT INTO
  scopes (data, expiry)
VALUES
  ($1, $2)
`

type CreateScopeParams struct {
	Data   []byte
	Expiry pgtype.Timestamptz
}

func (q *Queries) CreateScope(ctx context.Context, arg CreateScopeParams) error {
	_, err := q.db.Exec(ctx, createScope, arg.Data, arg.Expiry)
	return err
}

const createToken = `-- name: CreateToken :exec
INSERT INTO
  tokens (
    characterId,
    access_token,
    token_type,
    refresh_token,
    expiry
  )
VALUES
  ($1, $2, $3, $4, $5)
`

type CreateTokenParams struct {
	Characterid  int32
	AccessToken  string
	TokenType    string
	RefreshToken string
	Expiry       pgtype.Timestamptz
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.Exec(ctx, createToken,
		arg.Characterid,
		arg.AccessToken,
		arg.TokenType,
		arg.RefreshToken,
		arg.Expiry,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO
  users (characterOwnerHash)
VALUES
  ($1)
`

func (q *Queries) CreateUser(ctx context.Context, characterownerhash string) error {
	_, err := q.db.Exec(ctx, createUser, characterownerhash)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT
  u.userid,
  u.characterownerhash,
  c.characterid,
  c.expiry,
  c.portraiturl,
  c.name
FROM
  users u
  INNER JOIN characters c ON u.characterownerhash = c.charaterownerhash
WHERE
  c.characterid = $1
`

type GetCharacterRow struct {
	Userid             int32
	Characterownerhash string
	Characterid        int32
	Expiry             pgtype.Timestamptz
	Portraiturl        string
	Name               string
}

func (q *Queries) GetCharacter(ctx context.Context, characterid int32) (GetCharacterRow, error) {
	row := q.db.QueryRow(ctx, getCharacter, characterid)
	var i GetCharacterRow
	err := row.Scan(
		&i.Userid,
		&i.Characterownerhash,
		&i.Characterid,
		&i.Expiry,
		&i.Portraiturl,
		&i.Name,
	)
	return i, err
}

const getCharacterTokens = `-- name: GetCharacterTokens :many
SELECT
  t.tokenId,
  t.characterId,
  t.access_token,
  t.token_type,
  t.refresh_token,
  t.expiry
FROM
  tokens t
WHERE
  t.characterId = $1
`

func (q *Queries) GetCharacterTokens(ctx context.Context, characterid int32) ([]Token, error) {
	rows, err := q.db.Query(ctx, getCharacterTokens, characterid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.Tokenid,
			&i.Characterid,
			&i.AccessToken,
			&i.TokenType,
			&i.RefreshToken,
			&i.Expiry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
  u.userid,
  u.characterownerhash
FROM
  users u
WHERE
  u.characterownerhash = $1
`

func (q *Queries) GetUser(ctx context.Context, characterownerhash string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, characterownerhash)
	var i User
	err := row.Scan(&i.Userid, &i.Characterownerhash)
	return i, err
}

const getUserCharacters = `-- name: GetUserCharacters :many
SELECT
  u.userid,
  u.characterownerhash,
  c.characterid,
  c.expiry,
  c.portraiturl,
  c.name
FROM
  users u
  INNER JOIN characters c ON u.characterownerhash = c.charaterownerhash
WHERE
  u.characterownerhash = $1
`

type GetUserCharactersRow struct {
	Userid             int32
	Characterownerhash string
	Characterid        int32
	Expiry             pgtype.Timestamptz
	Portraiturl        string
	Name               string
}

func (q *Queries) GetUserCharacters(ctx context.Context, characterownerhash string) ([]GetUserCharactersRow, error) {
	rows, err := q.db.Query(ctx, getUserCharacters, characterownerhash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCharactersRow
	for rows.Next() {
		var i GetUserCharactersRow
		if err := rows.Scan(
			&i.Userid,
			&i.Characterownerhash,
			&i.Characterid,
			&i.Expiry,
			&i.Portraiturl,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
